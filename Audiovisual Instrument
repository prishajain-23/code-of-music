// INSTRUCTIONS
// PRESS A, S, D, F
// drop a beat!!!

// Load drum sounds
const hihat = new SimplePlayer("drums/hihat.wav"); // Hi-hat sound
hihat.toDestination(); // Send hi-hat audio to speakers

const kick = new SimplePlayer("drums/kick.wav"); // Kick drum sound
kick.toDestination(); // Send kick audio to speakers

const snare = new SimplePlayer("drums/snare.wav"); // Snare drum sound
snare.toDestination(); // Send snare audio to speakers

const tom = new SimplePlayer("drums/tom.wav"); // Tom drum sound
tom.toDestination(); // Send tom audio to speakers

// Tone.js Analyzer for waveform visualization (used for tom visuals)
const analyzer = new Tone.Analyser("waveform", 64); // Analyze waveform data
tom.connect(analyzer); // Connect tom audio to the analyzer

// Setup the canvas
function setup() {
  createCanvas(windowWidth, windowHeight); // Create a 400x400 canvas
}

// Main draw loop
function draw() {
  background(0, 30); // Black background with slight transparency for trails

  // Hi-hat visuals (3 diagonal lines)
  if (hihat.progress() > 0) {
    let length = hihat.progress() * 200; // Line length based on hi-hat progress
    stroke(random(255), 0, 150); // Set stroke color to random purple-pink tones
    strokeWeight(2); // Thin line weight
    for (let i = 0; i < 10; i++) { // Draw 10 sets of lines
      let offset = i * 5; // Offset for spacing between lines
      line(width, 0, width - length - offset, length + offset); // Main line
      line(width, 0, width - length - offset - 20, length + offset - 20); // Left line
      line(width, 0, width - length - offset + 20, length + offset + 20); // Right line
    }
  }

  // Kick drum visuals (vertical lines)
  if (kick.progress() > 0) {
    let length = kick.progress() * height/2; // Line length based on kick progress
    stroke(255, 0, 0); // Red color
    strokeWeight(8); // Thick line weight
    for (let i = 0; i < 5; i++) { // Draw 5 vertical lines
      let x = i * 40; // Horizontal spacing between lines
      line(x, 0, x, length); // Vertical lines extending downward
    }
  }

  // Snare visuals (rotating circles in Doxler Effect)
  if (snare.progress() > 0) {
    let angle = snare.progress() * TWO_PI; // Angle for rotation, based on snare progress
    let radius = height/5; // Distance of circles from the center
    stroke(0, 255, 255); // Cyan color
    // fill(0, 100, 255, 150); // Semi-transparent blue fill
    for (let i = 0; i < 6; i++) { // Draw 6 circles evenly spaced in rotation
      let x = width / 2 + cos(angle + i * PI / 3) * radius; // X position
      let y = height / 2 + sin(angle + i * PI / 3) * radius; // Y position
      ellipse(x, y, 20); // Draw a circle at each position
    }
  }

  // Tom visuals (horizontal waveform lines)
  if (tom.progress() > 0) {
    let waveform = analyzer.getValue(); // Get waveform data from the analyzer
    stroke(0, 255, 0); // Green color for waveform
    strokeWeight(2); // Thin line weight
    noFill(); // Do not fill shapes
    let yStart = height*2/3; // Starting y-position for waveform lines
    for (let i = 0; i < 4; i++) { // Draw 4 horizontal lines
      beginShape(); // Start drawing a shape
      for (let j = 0; j < waveform.length; j++) { // Iterate through waveform data
        let x = map(j, 0, waveform.length - 1, width, 0); // Map data to horizontal positions
        let y = yStart + i * 50 + waveform[j] * 50; // Map data to vertical positions
        vertex(x, y); // Add a point to the shape
      }
      endShape(); // Finish drawing the shape
    }
  }
}

// Map key presses to drum sounds
function keyTyped() {
  if (key == "a") { // Play hi-hat when "a" is pressed
    if (loaded) {
      hihat.start();
    }
  } else if (key == "s") { // Play kick when "s" is pressed
    if (loaded) {
      kick.start();
    }
  } else if (key == "d") { // Play snare when "d" is pressed
    if (loaded) {
      snare.start();
    }
  } else if (key == "f") { // Play tom when "f" is pressed
    if (loaded) {
      tom.start();
    }
  }
}

// Load all sounds before allowing playback
let loaded = false; // Track if sounds are loaded
Tone.loaded().then(function () { // When all sounds are loaded
  loaded = true;
  console.log("loaded!"); // Log confirmation
});